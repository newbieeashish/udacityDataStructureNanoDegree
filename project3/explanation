Problem #1: Finding the Square Root of an Integer The sqrt() functions uses the Babylonian method as described in the Wikipedia article. 
The space complexity = O(1) because we just store one single value and then return it.
The Babylonian method also has less operations to perform then the binary method in the core process. It should perform O(log n) where n is the input number to the function.


Problem #2: Search in a Rotated Sorted Array Before binary search the first thing that happens is to check the first, middle and last index position for the target value.

If it exists in one of those positions, then it returns the respective index.
If not, it proceeds to partition the input list by iteratively narrowing the partition to find the pivot point. Once the pivot point is found it then performs a binary search. 
It takes O(1) space to store the list plus the additional variables. 
Finding the pivot point is similar to a binary search as both begin by halving the list through each iteration and continuing dividing it in half until we find the pivot point or the target
value. Both should operate in O(log n), where n is the input size of the array/list.


Problem #3: Rearrange Array Elements Divides the list in half and uses a recursive merge sort to create two lists of digits. 
Merge sort space complexity is O(1) because we sort in the same array. Merge sort has a worst case time complexity of O(n log(n)).

Problem #4: Dutch National Flag Problem The algorithm steps through the input list using a three-way partitioning of the array. 
Comparing items in the list to the middle value, the ones, it swaps the elements moving the zeroes to the beginning and the twos towards the end. 
Uses three additional integers for keeping track of the low, mid and high points in the list plus one to hold the middle value for a total of four and, of course, a copy of the input list/array: O(n) Iterates through the list one time to complete the swaps: O(n) where n is the number of elements in the list.

Problem #5: Autocomplete With Tries
For the trie, time complexity of searching and inserting from a trie depends on the length of the word a thatâ€™s being searched for, inserted, and the number of total words, n, making the runtime of these operations O(a*n). 
Looking into the space complexity of a trie, the worst case, would be when we have a word (or words), with no common characters between them, hence having, a node for each letter. 
Resulting in a space complexity of O(n).


Problem #6: Max and Min in a Unsorted Array First things first, if the list size is zero just return False. 
If the list size is one then set min and max to the lone value. Use the first two items in the list and comparing them, set them to min or max. 
These form the base values for comparing items in the rest of the list. Now walk through the remainder of the list and compare items to update min or max as needed.
Two variables to hold min and max plus a copy of the list of n elements: O(n)
Makes one pass through the list examining each element one time: O(n) with n being number of elements in list.
The space complexity is O(1) because we just use two variables to store the minimum and the maximum value.

Problem #7: HTTPRouter using a Trie Three classes: a router trie node, a router trie and a router. 
Initially, I had it working without using the trie node, which I feel adds an extra layer that is not needed to solve this problem. 
On review of the requirements, however, I changed it to use all three classes.
Using a dictionary should be O(n) where n is the count or number of components in the path.
Since we have to traverse the children to find the path and any handler we have O(n) worst case.
